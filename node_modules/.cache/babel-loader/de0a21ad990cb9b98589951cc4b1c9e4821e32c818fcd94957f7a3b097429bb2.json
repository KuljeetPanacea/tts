{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ContinuousSTT=()=>{const[transcript,setTranscript]=useState(\"\");const[isListening,setIsListening]=useState(false);const recognitionRef=useRef(null);useEffect(()=>{// Initialize SpeechRecognition\nconst SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(!SpeechRecognition){alert(\"SpeechRecognition API is not supported in your browser.\");return;}recognitionRef.current=new SpeechRecognition();recognitionRef.current.lang=\"en-US\";recognitionRef.current.interimResults=true;recognitionRef.current.maxAlternatives=1;recognitionRef.current.continuous=true;// Ensure continuous listening\nrecognitionRef.current.onstart=()=>{console.log(\"Speech recognition started...\");setIsListening(true);};recognitionRef.current.onresult=event=>{const interimTranscript=Array.from(event.results).map(result=>result[0].transcript).join(\"\");console.log(\"Interim Transcript:\",interimTranscript);if(event.results[event.results.length-1].isFinal){console.log(\"Final Transcript:\",interimTranscript);setTranscript(interimTranscript);// Append only final results\n}else{setTranscript(interimTranscript);// Show only interim results while speaking\n}};recognitionRef.current.onerror=event=>{console.error(\"Speech recognition error:\",event.error);};recognitionRef.current.onend=()=>{console.log(\"Speech recognition ended. Restarting...\");startListening();// Automatically restart onend\n};// Cleanup on unmount\nreturn()=>{if(recognitionRef.current){recognitionRef.current.stop();}};},[]);const startListening=()=>{if(!recognitionRef.current)return;recognitionRef.current.start();console.log(\"Continuous listening started.\");};const stopListening=()=>{if(recognitionRef.current){recognitionRef.current.stop();setIsListening(false);console.log(\"Listening stopped.\");}};useEffect(()=>{startListening();// Start listening on component mount\nreturn stopListening;// Stop listening on component unmount\n},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:\"center\",marginTop:\"20px\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Continuous Speech-to-Text (STT)\"}),/*#__PURE__*/_jsx(\"p\",{children:isListening?\"Listening...\":\"Not Listening\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:startListening,disabled:isListening,children:\"Start Listening\"}),/*#__PURE__*/_jsx(\"button\",{onClick:stopListening,disabled:!isListening,children:\"Stop Listening\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:\"20px\",padding:\"10px\",border:\"1px solid #ddd\",borderRadius:\"5px\",maxWidth:\"500px\",margin:\"0 auto\"},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Transcript:\"}),/*#__PURE__*/_jsx(\"p\",{children:transcript})]})]});};export default ContinuousSTT;","map":{"version":3,"names":["React","useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","ContinuousSTT","transcript","setTranscript","isListening","setIsListening","recognitionRef","SpeechRecognition","window","webkitSpeechRecognition","alert","current","lang","interimResults","maxAlternatives","continuous","onstart","console","log","onresult","event","interimTranscript","Array","from","results","map","result","join","length","isFinal","onerror","error","onend","startListening","stop","start","stopListening","style","textAlign","marginTop","children","onClick","disabled","padding","border","borderRadius","maxWidth","margin"],"sources":["D:/Reactjs/tts/src/ContinuousSTT.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nconst ContinuousSTT = () => {\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize SpeechRecognition\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      alert(\"SpeechRecognition API is not supported in your browser.\");\r\n      return;\r\n    }\r\n\r\n    recognitionRef.current = new SpeechRecognition();\r\n    recognitionRef.current.lang = \"en-US\";\r\n    recognitionRef.current.interimResults = true;\r\n    recognitionRef.current.maxAlternatives = 1;\r\n    recognitionRef.current.continuous = true; // Ensure continuous listening\r\n\r\n    recognitionRef.current.onstart = () => {\r\n      console.log(\"Speech recognition started...\");\r\n      setIsListening(true);\r\n    };\r\n\r\n    recognitionRef.current.onresult = (event) => {\r\n      const interimTranscript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join(\"\");\r\n\r\n      console.log(\"Interim Transcript:\", interimTranscript);\r\n\r\n      if (event.results[event.results.length - 1].isFinal) {\r\n        console.log(\"Final Transcript:\", interimTranscript);\r\n        setTranscript(interimTranscript); // Append only final results\r\n      } else {\r\n        setTranscript(interimTranscript); // Show only interim results while speaking\r\n      }\r\n    };\r\n\r\n    recognitionRef.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n    };\r\n\r\n    recognitionRef.current.onend = () => {\r\n      console.log(\"Speech recognition ended. Restarting...\");\r\n      startListening(); // Automatically restart onend\r\n    };\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startListening = () => {\r\n    if (!recognitionRef.current) return;\r\n\r\n    recognitionRef.current.start();\r\n    console.log(\"Continuous listening started.\");\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n      console.log(\"Listening stopped.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startListening(); // Start listening on component mount\r\n    return stopListening; // Stop listening on component unmount\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <h1>Continuous Speech-to-Text (STT)</h1>\r\n      <p>{isListening ? \"Listening...\" : \"Not Listening\"}</p>\r\n      <div>\r\n        <button onClick={startListening} disabled={isListening}>\r\n          Start Listening\r\n        </button>\r\n        <button onClick={stopListening} disabled={!isListening}>\r\n          Stop Listening\r\n        </button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: \"20px\",\r\n          padding: \"10px\",\r\n          border: \"1px solid #ddd\",\r\n          borderRadius: \"5px\",\r\n          maxWidth: \"500px\",\r\n          margin: \"0 auto\",\r\n        }}\r\n      >\r\n        <h3>Transcript:</h3>\r\n        <p>{transcript}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinuousSTT;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}