{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs\\\\tts\\\\src\\\\ContinuousSTT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContinuousSTT = () => {\n  _s();\n  const [transcript, setTranscript] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    // Initialize SpeechRecognition\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"SpeechRecognition API is not supported in your browser.\");\n      return;\n    }\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.lang = \"en-US\";\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.maxAlternatives = 1;\n    recognitionRef.current.continuous = true; // Ensure continuous listening\n\n    recognitionRef.current.onstart = () => {\n      console.log(\"Speech recognition started...\");\n      setIsListening(true);\n    };\n    recognitionRef.current.onresult = event => {\n      const interimTranscript = Array.from(event.results).map(result => result[0].transcript).join(\"\");\n      console.log(\"Interim Transcript:\", interimTranscript);\n      if (event.results[event.results.length - 1].isFinal) {\n        console.log(\"Final Transcript:\", interimTranscript);\n        setTranscript(interimTranscript); // Append only final results\n      } else {\n        setTranscript(interimTranscript); // Show only interim results while speaking\n      }\n    };\n    recognitionRef.current.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognitionRef.current.onend = () => {\n      console.log(\"Speech recognition ended. Restarting...\");\n      startListening(); // Automatically restart onend\n    };\n\n    // Cleanup on unmount\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, []);\n  const startListening = () => {\n    if (!recognitionRef.current) return;\n    recognitionRef.current.start();\n    console.log(\"Continuous listening started.\");\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n      console.log(\"Listening stopped.\");\n    }\n  };\n  useEffect(() => {\n    startListening(); // Start listening on component mount\n    return stopListening; // Stop listening on component unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Continuous Speech-to-Text (STT)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isListening ? \"Listening...\" : \"Not Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        disabled: isListening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopListening,\n        disabled: !isListening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        padding: \"10px\",\n        border: \"1px solid #ddd\",\n        borderRadius: \"5px\",\n        maxWidth: \"500px\",\n        margin: \"0 auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcript:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(ContinuousSTT, \"CxyEIqkRmEu5dHn/r6lCJfJ9qTI=\");\n_c = ContinuousSTT;\nexport default ContinuousSTT;\nvar _c;\n$RefreshReg$(_c, \"ContinuousSTT\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ContinuousSTT","_s","transcript","setTranscript","isListening","setIsListening","recognitionRef","SpeechRecognition","window","webkitSpeechRecognition","alert","current","lang","interimResults","maxAlternatives","continuous","onstart","console","log","onresult","event","interimTranscript","Array","from","results","map","result","join","length","isFinal","onerror","error","onend","startListening","stop","start","stopListening","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","padding","border","borderRadius","maxWidth","margin","_c","$RefreshReg$"],"sources":["D:/Reactjs/tts/src/ContinuousSTT.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nconst ContinuousSTT = () => {\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize SpeechRecognition\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      alert(\"SpeechRecognition API is not supported in your browser.\");\r\n      return;\r\n    }\r\n\r\n    recognitionRef.current = new SpeechRecognition();\r\n    recognitionRef.current.lang = \"en-US\";\r\n    recognitionRef.current.interimResults = true;\r\n    recognitionRef.current.maxAlternatives = 1;\r\n    recognitionRef.current.continuous = true; // Ensure continuous listening\r\n\r\n    recognitionRef.current.onstart = () => {\r\n      console.log(\"Speech recognition started...\");\r\n      setIsListening(true);\r\n    };\r\n\r\n    recognitionRef.current.onresult = (event) => {\r\n      const interimTranscript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join(\"\");\r\n\r\n      console.log(\"Interim Transcript:\", interimTranscript);\r\n\r\n      if (event.results[event.results.length - 1].isFinal) {\r\n        console.log(\"Final Transcript:\", interimTranscript);\r\n        setTranscript(interimTranscript); // Append only final results\r\n      } else {\r\n        setTranscript(interimTranscript); // Show only interim results while speaking\r\n      }\r\n    };\r\n\r\n    recognitionRef.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n    };\r\n\r\n    recognitionRef.current.onend = () => {\r\n      console.log(\"Speech recognition ended. Restarting...\");\r\n      startListening(); // Automatically restart onend\r\n    };\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startListening = () => {\r\n    if (!recognitionRef.current) return;\r\n\r\n    recognitionRef.current.start();\r\n    console.log(\"Continuous listening started.\");\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n      console.log(\"Listening stopped.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startListening(); // Start listening on component mount\r\n    return stopListening; // Stop listening on component unmount\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n      <h1>Continuous Speech-to-Text (STT)</h1>\r\n      <p>{isListening ? \"Listening...\" : \"Not Listening\"}</p>\r\n      <div>\r\n        <button onClick={startListening} disabled={isListening}>\r\n          Start Listening\r\n        </button>\r\n        <button onClick={stopListening} disabled={!isListening}>\r\n          Stop Listening\r\n        </button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: \"20px\",\r\n          padding: \"10px\",\r\n          border: \"1px solid #ddd\",\r\n          borderRadius: \"5px\",\r\n          maxWidth: \"500px\",\r\n          margin: \"0 auto\",\r\n        }}\r\n      >\r\n        <h3>Transcript:</h3>\r\n        <p>{transcript}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinuousSTT;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMW,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,iBAAiB,GACrBC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IAE5D,IAAI,CAACF,iBAAiB,EAAE;MACtBG,KAAK,CAAC,yDAAyD,CAAC;MAChE;IACF;IAEAJ,cAAc,CAACK,OAAO,GAAG,IAAIJ,iBAAiB,CAAC,CAAC;IAChDD,cAAc,CAACK,OAAO,CAACC,IAAI,GAAG,OAAO;IACrCN,cAAc,CAACK,OAAO,CAACE,cAAc,GAAG,IAAI;IAC5CP,cAAc,CAACK,OAAO,CAACG,eAAe,GAAG,CAAC;IAC1CR,cAAc,CAACK,OAAO,CAACI,UAAU,GAAG,IAAI,CAAC,CAAC;;IAE1CT,cAAc,CAACK,OAAO,CAACK,OAAO,GAAG,MAAM;MACrCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5Cb,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC;IAEDC,cAAc,CAACK,OAAO,CAACQ,QAAQ,GAAIC,KAAK,IAAK;MAC3C,MAAMC,iBAAiB,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC,CAChDC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACxB,UAAU,CAAC,CACrCyB,IAAI,CAAC,EAAE,CAAC;MAEXV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,iBAAiB,CAAC;MAErD,IAAID,KAAK,CAACI,OAAO,CAACJ,KAAK,CAACI,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAACC,OAAO,EAAE;QACnDZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,iBAAiB,CAAC;QACnDlB,aAAa,CAACkB,iBAAiB,CAAC,CAAC,CAAC;MACpC,CAAC,MAAM;QACLlB,aAAa,CAACkB,iBAAiB,CAAC,CAAC,CAAC;MACpC;IACF,CAAC;IAEDf,cAAc,CAACK,OAAO,CAACmB,OAAO,GAAIV,KAAK,IAAK;MAC1CH,OAAO,CAACc,KAAK,CAAC,2BAA2B,EAAEX,KAAK,CAACW,KAAK,CAAC;IACzD,CAAC;IAEDzB,cAAc,CAACK,OAAO,CAACqB,KAAK,GAAG,MAAM;MACnCf,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtDe,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;;IAED;IACA,OAAO,MAAM;MACX,IAAI3B,cAAc,CAACK,OAAO,EAAE;QAC1BL,cAAc,CAACK,OAAO,CAACuB,IAAI,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAC3B,cAAc,CAACK,OAAO,EAAE;IAE7BL,cAAc,CAACK,OAAO,CAACwB,KAAK,CAAC,CAAC;IAC9BlB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC;EAED,MAAMkB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI9B,cAAc,CAACK,OAAO,EAAE;MAC1BL,cAAc,CAACK,OAAO,CAACuB,IAAI,CAAC,CAAC;MAC7B7B,cAAc,CAAC,KAAK,CAAC;MACrBY,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC;EACF,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdoC,cAAc,CAAC,CAAC,CAAC,CAAC;IAClB,OAAOG,aAAa,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErC,OAAA;IAAKsC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACrDzC,OAAA;MAAAyC,QAAA,EAAI;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxC7C,OAAA;MAAAyC,QAAA,EAAIpC,WAAW,GAAG,cAAc,GAAG;IAAe;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvD7C,OAAA;MAAAyC,QAAA,gBACEzC,OAAA;QAAQ8C,OAAO,EAAEZ,cAAe;QAACa,QAAQ,EAAE1C,WAAY;QAAAoC,QAAA,EAAC;MAExD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7C,OAAA;QAAQ8C,OAAO,EAAET,aAAc;QAACU,QAAQ,EAAE,CAAC1C,WAAY;QAAAoC,QAAA,EAAC;MAExD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN7C,OAAA;MACEsC,KAAK,EAAE;QACLE,SAAS,EAAE,MAAM;QACjBQ,OAAO,EAAE,MAAM;QACfC,MAAM,EAAE,gBAAgB;QACxBC,YAAY,EAAE,KAAK;QACnBC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE;MACV,CAAE;MAAAX,QAAA,gBAEFzC,OAAA;QAAAyC,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB7C,OAAA;QAAAyC,QAAA,EAAItC;MAAU;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAzGID,aAAa;AAAAoD,EAAA,GAAbpD,aAAa;AA2GnB,eAAeA,aAAa;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}